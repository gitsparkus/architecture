# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.disks import Disks  # noqa: F401,E501
from swagger_server import util


class Order(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, description: str=None, client_id: int=None, platform_id: int=None, public_ip_flag: bool=None, public_ip: str=None, cpu: int=None, ram: int=None, status: int=None, disks: List[Disks]=None):  # noqa: E501
        """Order - a model defined in Swagger

        :param id: The id of this Order.  # noqa: E501
        :type id: int
        :param name: The name of this Order.  # noqa: E501
        :type name: str
        :param description: The description of this Order.  # noqa: E501
        :type description: str
        :param client_id: The client_id of this Order.  # noqa: E501
        :type client_id: int
        :param platform_id: The platform_id of this Order.  # noqa: E501
        :type platform_id: int
        :param public_ip_flag: The public_ip_flag of this Order.  # noqa: E501
        :type public_ip_flag: bool
        :param public_ip: The public_ip of this Order.  # noqa: E501
        :type public_ip: str
        :param cpu: The cpu of this Order.  # noqa: E501
        :type cpu: int
        :param ram: The ram of this Order.  # noqa: E501
        :type ram: int
        :param status: The status of this Order.  # noqa: E501
        :type status: int
        :param disks: The disks of this Order.  # noqa: E501
        :type disks: List[Disks]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'description': str,
            'client_id': int,
            'platform_id': int,
            'public_ip_flag': bool,
            'public_ip': str,
            'cpu': int,
            'ram': int,
            'status': int,
            'disks': List[Disks]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'client_id': 'client_id',
            'platform_id': 'platform_id',
            'public_ip_flag': 'public_ip_flag',
            'public_ip': 'public_ip',
            'cpu': 'CPU',
            'ram': 'RAM',
            'status': 'status',
            'disks': 'disks'
        }
        self._id = id
        self._name = name
        self._description = description
        self._client_id = client_id
        self._platform_id = platform_id
        self._public_ip_flag = public_ip_flag
        self._public_ip = public_ip
        self._cpu = cpu
        self._ram = ram
        self._status = status
        self._disks = disks

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Order.


        :return: The id of this Order.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Order.


        :param id: The id of this Order.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Order.


        :return: The name of this Order.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Order.


        :param name: The name of this Order.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Order.


        :return: The description of this Order.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Order.


        :param description: The description of this Order.
        :type description: str
        """

        self._description = description

    @property
    def client_id(self) -> int:
        """Gets the client_id of this Order.


        :return: The client_id of this Order.
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: int):
        """Sets the client_id of this Order.


        :param client_id: The client_id of this Order.
        :type client_id: int
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def platform_id(self) -> int:
        """Gets the platform_id of this Order.


        :return: The platform_id of this Order.
        :rtype: int
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id: int):
        """Sets the platform_id of this Order.


        :param platform_id: The platform_id of this Order.
        :type platform_id: int
        """
        if platform_id is None:
            raise ValueError("Invalid value for `platform_id`, must not be `None`")  # noqa: E501

        self._platform_id = platform_id

    @property
    def public_ip_flag(self) -> bool:
        """Gets the public_ip_flag of this Order.


        :return: The public_ip_flag of this Order.
        :rtype: bool
        """
        return self._public_ip_flag

    @public_ip_flag.setter
    def public_ip_flag(self, public_ip_flag: bool):
        """Sets the public_ip_flag of this Order.


        :param public_ip_flag: The public_ip_flag of this Order.
        :type public_ip_flag: bool
        """

        self._public_ip_flag = public_ip_flag

    @property
    def public_ip(self) -> str:
        """Gets the public_ip of this Order.


        :return: The public_ip of this Order.
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip: str):
        """Sets the public_ip of this Order.


        :param public_ip: The public_ip of this Order.
        :type public_ip: str
        """

        self._public_ip = public_ip

    @property
    def cpu(self) -> int:
        """Gets the cpu of this Order.


        :return: The cpu of this Order.
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu: int):
        """Sets the cpu of this Order.


        :param cpu: The cpu of this Order.
        :type cpu: int
        """

        self._cpu = cpu

    @property
    def ram(self) -> int:
        """Gets the ram of this Order.


        :return: The ram of this Order.
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram: int):
        """Sets the ram of this Order.


        :param ram: The ram of this Order.
        :type ram: int
        """

        self._ram = ram

    @property
    def status(self) -> int:
        """Gets the status of this Order.


        :return: The status of this Order.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this Order.


        :param status: The status of this Order.
        :type status: int
        """

        self._status = status

    @property
    def disks(self) -> List[Disks]:
        """Gets the disks of this Order.


        :return: The disks of this Order.
        :rtype: List[Disks]
        """
        return self._disks

    @disks.setter
    def disks(self, disks: List[Disks]):
        """Sets the disks of this Order.


        :param disks: The disks of this Order.
        :type disks: List[Disks]
        """

        self._disks = disks
