# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Disk(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, order_id: int=None, size: int=None, type_id: int=None):  # noqa: E501
        """Disk - a model defined in Swagger

        :param id: The id of this Disk.  # noqa: E501
        :type id: int
        :param order_id: The order_id of this Disk.  # noqa: E501
        :type order_id: int
        :param size: The size of this Disk.  # noqa: E501
        :type size: int
        :param type_id: The type_id of this Disk.  # noqa: E501
        :type type_id: int
        """
        self.swagger_types = {
            'id': int,
            'order_id': int,
            'size': int,
            'type_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'order_id': 'order_id',
            'size': 'size',
            'type_id': 'type_id'
        }
        self._id = id
        self._order_id = order_id
        self._size = size
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt) -> 'Disk':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Disk of this Disk.  # noqa: E501
        :rtype: Disk
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Disk.


        :return: The id of this Disk.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Disk.


        :param id: The id of this Disk.
        :type id: int
        """

        self._id = id

    @property
    def order_id(self) -> int:
        """Gets the order_id of this Disk.


        :return: The order_id of this Disk.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id: int):
        """Sets the order_id of this Disk.


        :param order_id: The order_id of this Disk.
        :type order_id: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def size(self) -> int:
        """Gets the size of this Disk.


        :return: The size of this Disk.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this Disk.


        :param size: The size of this Disk.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def type_id(self) -> int:
        """Gets the type_id of this Disk.


        :return: The type_id of this Disk.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id: int):
        """Sets the type_id of this Disk.


        :param type_id: The type_id of this Disk.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id
